#+TITLE: Emacs configuration file
#+AUTHOR: Guilherme Menezes
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Init
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)

  (setq backup-directory-alist
	`(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC


* Better Default
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 0))     ; Disable the tooltips



(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-window-vscroll nil                          ; Lighten vertical scroll
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%H:%M"                      ; Format the time string
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Use tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-help-function nil                           ; Disable help messages
 show-trailing-whitespace t                       ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 delete-old-versions -1                           ; Delete excess backup versions silently
 version-control t                                ; Use version control
 ring-bell-function 'ignore                       ; Silent bell when you make a mistake
 inhibit-compacting-font-caches t                 ; Faster navigation point (costs more memory)
 recentf-mode t                                   ; Keep recent files
 make-backup-files nil                            ; Stop creating backup files
 display-line-numbers-type 'relative              ; Use relative line numbers
 vc-follow-symlinks t                             ; When the symlink points to a version-controlled file
 use-default-font-for-symbols nil                 ; Do not use the frame font when rendering emojis
 frame-inhibit-implied-resize nil)                ; Don't ask for confirmation when opening symlinked file
(cd "~/")                                         ; Move to the user directory
(global-display-line-numbers-mode t)              ; Enable line numbers globally
(delete-selection-mode 1)                         ; Replace region when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(global-auto-revert-mode 1)                       ; Automatically revert a buffer when it changes on disk
(fringe-mode '(8 . 0))                            ; Enable fringe on the left for git-gutter-fringe+
(electric-pair-mode t)                            ; Enable Matching delimeters
(electric-indent-mode t)                          ; Auto indentation
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(mouse-avoidance-mode 'jump)                      ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(show-paren-mode 1)                               ; Highlight matching parenthesis
#+END_SRC


* Appearance
** Tweaks
#+BEGIN_SRC emacs-lisp 
(set-frame-parameter nil 'alpha-background 55)
(set-face-attribute 'default nil :font "FiraCode Nerd Font Mono" :height 85)
#+END_SRC
** Doom Themes
#+BEGIN_SRC emacs-lisp
;; (use-package doom-themes
;;   :ensure t
;;   :custom
;;   (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
;;   (doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   ;; (doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
;;   :config
;;   (doom-themes-visual-bell-config)
;;   (doom-themes-treemacs-config)
;;   (doom-themes-org-config))

(use-package catppuccin-theme)
(use-package ef-themes)

(use-package kaolin-themes
  :custom
  (setq kaolin-themes-modeline-border nil
        kaolin-themes-git-gutter-solid t)
  :config
  (load-theme 'kaolin-dark t)
  (kaolin-treemacs-theme))

;; (load-theme 'ef-winter)

;;(setq catppuccin-flavor 'mocha)
;;(catppuccin-reload)
#+END_SRC

** Doom Modeline
#+BEGIN_SRC emacs-lisp
;; (use-package doom-modeline
;;   :init (doom-modeline-mode 1)
;;   :custom
;;   (doom-modeline-major-mode-icon t)
;;   (doom-modeline-major-mode-color-icon t)
;;   (doom-modeline-icon (display-graphic-p))
;;   (doom-modeline-modal-modern-icon t)
;;   (doom-modeline-buffer-modification-icon nil)
;;   (doom-modeline-flycheck-icon t)
;;   (doom-modeline-checker-simple-format t)
;;   (doom-modeline-height 25)
;;   (doom-modeline-buffer-file-name-style 'file-name)
;;   (doom-modeline-buffer-encoding nil))
#+END_SRC
** Indent Bars
#+BEGIN_SRC emacs-lisp
  (use-package indent-bars
      :hook ((python-mode yaml-mode nix-mode rust-mode typescript-mode javascript-mode) . indent-bars-mode))
#+END_SRC

** All The Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
      :if (display-graphic-p))
#+END_SRC


* Orgggggggggggggggggggg
** Org
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)

(setq org-adapt-indentation t
      org-hide-leading-stars t
      org-hide-emphasis-markers t
      org-pretty-entities t
      org-ellipsis "...")
#+END_SRC
** Org Indent
#+BEGIN_SRC emacs-lisp
  (require 'org-indent)
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory (file-truename "/home/thechibbis/org-files/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+END_SRC
** Org Modern
#+BEGIN_SRC emacs-lisp
  (dolist (face '(window-divider
		window-divider-first-pixel
		window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

    (setq
     org-auto-align-tags t
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")


  (with-eval-after-load 'org (global-org-modern-mode))
#+END_SRC
** Org Superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :config
    (setq org-superstar-leading-bullet " ")
    (setq org-superstar-special-todo-items t) ;; Makes TODO header bullets into boxes
    (setq org-superstar-todo-bullet-alist '(("TODO" . 9744)
                                            ("DONE" . 9744)
                                            ("READ" . 9744)
                                            ("IDEA" . 9744)
                                            ("WAITING" . 9744)
                                            ("CANCELLED" . 9744)
                                            ("PROJECT" . 9744)
                                            ("POSTPONED" . 9744)))
    )
#+END_SRC



* Packages
** Corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  :after orderless
  :custom
  (corfu-auto t)
  (corfu-auto-delay 0.2)
  (corfu-on-exact-match nil)
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  (tab-always-indent 'complete)
  (corfu-auto-prefix 1)
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))
  :init
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-items '((recents   . 5)
			    (bookmarks . 5)
			    (projects  . 5)
			    (agenda    . 5)
			    (registers . 5)))
    (dashboard-setup-startup-hook))
#+END_SRC
** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico)
(use-package vertico-posframe)
(use-package all-the-icons-completion)

(use-package consult)

(vertico-posframe-mode 1)
(all-the-icons-completion-mode)
(vertico-mode)
(savehist-mode)
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	  treemacs-width                           35
	  treemacs-no-png-images                   nil
	  treemacs-workspace-switch-cleanup        t)

    (treemacs-follow-mode t)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
		 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))

  (defun my-treemacs-disable-line-numbers ()
    "Disable line numbers in Treemacs buffers."
    (when (derived-mode-p 'treemacs-mode)
      (display-line-numbers-mode -1)))

  (add-hook 'treemacs-mode-hook 'my-treemacs-disable-line-numbers)
  :bind
  (:map global-map
	("M-0"       . treemacs-select-window)
	("C-x t 1"   . treemacs-delete-other-windows)
	("C-x t t"   . treemacs)
	("C-x t d"   . treemacs-select-directory)
	("C-x t B"   . treemacs-bookmark)
	("C-x t C-t" . treemacs-find-file)
	("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once))

(use-package treemacs-magit
  :after (treemacs magit))

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))

(use-package treemacs-all-the-icons
  :config
  (treemacs-load-theme "all-the-icons"))
#+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (add-hook 'magit-status-sections-hook 'magit-insert-stashes))

;; Getting an alist-void error when running magit commands that refresh the buffer. Narrowed down to this variable so turning off for now
(setq magit-section-cache-visibility nil)
#+END_SRC

** Smudge
#+BEGIN_SRC emacs-lisp
(use-package smudge
  :bind-keymap ("C-c ." . smudge-command-map)
  :custom
  (smudge-oauth2-client-id "d9061b0925e44f66817775e876b0e97a")
  (smudge-oauth2-client-secret "c63b2c4806914ebf8753a7870a339027")
  (smudge-player-use-transient-map t)
  :config
  (global-smudge-remote-mode))
#+END_SRC




* Dev
** Treesit
#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
      :custom
      (treesit-auto-install 'prompt)
      :config
      (treesit-auto-add-to-auto-mode-alist 'all)
      (global-treesit-auto-mode))
#+END_SRC

** Yasnippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config (yas-global-mode 1))

   (use-package yasnippet-snippets)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :after (direnv-mode)
  :config
  (setq flycheck-display-errors-delay 0.25
        flycheck-buffer-switch-check-intermediate-buffers t)
  :init (global-flycheck-mode)
  :bind (:map flycheck-mode-map
	      ("M-n" . flycheck-next-error) ; optional but recommended error navigation
	      ("M-p" . flycheck-previous-error)))

(add-hook 'after-init-hook #'global-flycheck-mode)

(use-package flycheck-eglot
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode 1))

(use-package flycheck-posframe
  :ensure t
  :after flycheck
  :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (setq flycheck-posframe-position 'point-bottom-right-corner))
#+END_SRC
** lsp
*** Modes
**** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
(use-package rust-ts-mode
  :after (eglot)
  :hook ((rust-ts-mode . eglot-ensure)
	     (rust-ts-mode . company-tng-mode)
	     (rust-ts-mode . (lambda ()
			               (eglot-inlay-hints-mode -1))))
  :config
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (add-to-list 'eglot-server-programs '(rust-ts-mode . ("rust-analyzer"))))

(use-package rustic
  :config
  (setq rustic-format-on-save nil)
  :custom
  (rustic-lsp-client 'eglot)
  (rustic-cargo-use-last-stored-arguments t)
:after (rust-mode))

(use-package cargo)
(use-package flycheck-rust)

(push 'rustic-clippy flycheck-checkers)

(with-eval-after-load 'rust-mode
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

(setq-default eglot-workspace-configuration
              '(:rust-analyzer (:check (:command "clippy"))))
#+END_SRC

**** go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :bind (("C-c C-k" . go-run-this-file)
         ("C-c C-c" . go-compile)
         ("C-c C-d" . go-compile-debug))
  :hook ((before-save . eglot-format-buffer)))
#+END_SRC

*** Eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :commands eglot eglot-unsure
  :hook ((go-ts-mode . eglot-ensure)
         (protobuf-mode . eglot-ensure))
  :custom
  (eglot-sync-connect 1)
  (eglot-autoshutdown t)
  (eglot-auto-display-help-buffer nil)
  :config
  (cl-callf plist-put eglot-events-buffer-config :size 0)

  (add-to-list 'eglot-server-programs
               `(protobuf-mode
                 . ,(eglot-alternatives '(("buf" "beta" "lsp" "--timeout" "0" "--log-format" "json"))))))

(add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
#+END_SRC

*** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :custom (eldoc-echo-area-use-multiline-p 'truncate-sym-name-if-fit))

(use-package eldoc-box)

(setq read-process-output-max (* 1024 1024))

(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)
#+END_SRC



* Keymaps
** Vim > Emacs
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
  (which-key-setup-side-window-bottom)
#+END_SRC

** General
#+BEGIN_SRC emacs-lisp
(require 'general)

(general-create-definer my-leader-def
  :prefix "SPC")

(my-leader-def
  :keymaps 'normal
  "TAB" 'mode-line-other-buffer
  "." 'xref-find-definitions
  "," 'xref-pop-marker-stack
  "vt" 'vterm
  "qq" 'evil-quit
  "gg" 'magit-status
  
  ;; Applications
  "a" '(:ignore t :which-key "applications")
  "au" 'undo-tree-visualize
  "aU" 'straight-pull-all
  "ac" 'cfw:open-org-calendar
  
  ;; Buffers
  "b" '(:ignore t :which-key "buffers")
  "bb" 'consult-buffer
  "bd" 'kill-this-buffer
  "bp" 'previous-buffer
  "bn" 'next-buffer
  "bN" 'evil-buffer-new
  "be" 'erase-buffer
  
  ;; Bookmarks
  "B" '(:ignore t :which-key "bookmarks")
  "BB" 'bookmark-jump
  "Bs" 'bookmark-set
  
  ;; Compiling
  "c" 'compile
  
  ;; Errors
  "e" '(:ignore t :which-key "errors")
  
  ;; Files
  "f" '(:ignore t :which-key "file")
  "ff" 'find-file
  "fs" 'save-buffer
  "fS" 'evil-write-all
  "fR" 'rename-file
  "fb" 'ranger-show-bookmarks
  "fP" 'open-config-file
  
  ;; Focus
  "F" '(:ignore t :which-key "focus")
  
  ;; LSP
  "vca" 'eglot-code-actions
  "vff" 'eglot-format-buffer
  "vrn" 'eglot-rename
  "vrr" 'lsp-ui-peek-find-references
  "gd"  'eglot-find-declaration
  "gD"  'eglot-find-implementation
  "K"   'lsp-ui-doc-glance
  "ll"  'lsp-ui-flycheck-list

  ;; Projects
  "pp" 'projectile-switch-project
  "pf" 'projectile-find-file

  ;; Toggles
  "t" '(:ignore t :which-key "toggles")
  "tn" 'display-line-numbers-mode
  "tL" 'visual-line-mode
  "tu" 'lsp-ui-mode
  "ti" 'highlight-indent-guides-mode

  ;; Themes
  "tt" 'consult-theme

  ;; Windows
  "w" '(:ignore t :which-key "window")
  "wm" 'delete-other-windows
  "wf" 'delete-other-windows
  "wj" 'evil-window-down
  "wk" 'evil-window-up
  "wl" 'evil-window-right
  "wh" 'evil-window-left
  "ws" 'split-and-follow-horizontally
  "wv" 'split-and-follow-vertically
  "wd" 'evil-window-delete
  "wc" 'evil-window-delete
  "wH" 'evil-window-move-far-left
  "wL" 'evil-window-move-far-right
  "wK" 'evil-window-move-very-top
  "wJ" 'evil-window-move-very-bottom
  "w=" 'balance-windows

  ;; Help
  "h" '(:ignore t :which-key "help")
  "hk" 'describe-key
  "hv" 'describe-variable
  "hf" 'describe-function
  "hK" 'general-describe-keybindings)

;;(use-package general
;;       :demand t
;;       :config
;;       (general-evil-setup t)
;;       (define-key evil-motion-state-map " " nil)
;;       (general-create-definer leader-def :prefix "SPC")
;;       (leader-def
;;         :states 'normal
;;         ;; Misc
;;         ))
#+END_SRC


* IDK WHERE TO PUT
#+begin_src emacs-lisp
(rainbow-mode)

(use-package direnv
  :config
  (direnv-mode))


(use-package projectile
  :custom
  (projectile-enable-caching t)
  :config
  (setq projectile-indexing-method 'alien)
  (projectile-mode))

(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(use-package emacs
  :custom
  (context-menu-mode t)
  (enable-recursive-minibuffers t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  (tab-always-indent 'complete)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (text-mode-ispell-word-completion nil))
#+end_src
