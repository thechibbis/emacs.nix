#+TITLE: Emacs configuration file
#+AUTHOR: Guilherme Menezes
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Init

** [[https://github.com/emacsmirror/gcmh][GCMH]]
#+BEGIN_SRC emacs-lisp
(use-package gcmh
  :demand
  :config (gcmh-mode 1))
#+END_SRC


* Better Default
Copied from megumacs
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 0))     ; Disable the tooltips



(setq-default
 create-lockfiles nil
 backup-directory-alist
 `(("." . ,(concat user-emacs-directory "backups")))
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-window-vscroll nil                          ; Lighten vertical scroll
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%H:%M"                      ; Format the time string
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Use tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-help-function nil                           ; Disable help messages
 show-trailing-whitespace t                       ; Display trailing whitespaces
 tab-width 4                                      ; Set width for tabs
 line-spacing 0.25
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 delete-old-versions -1                           ; Delete excess backup versions silently
 version-control t                                ; Use version control
 ring-bell-function 'ignore                       ; Silent bell when you make a mistake
 inhibit-compacting-font-caches t                 ; Faster navigation point (costs more memory)
 recentf-mode t                                   ; Keep recent files
 make-backup-files nil                            ; Stop creating backup files
 display-line-numbers-type 'relative              ; Use relative line numbers
 vc-follow-symlinks t                             ; When the symlink points to a version-controlled file
 window-resize-freely t
 use-default-font-for-symbols nil                 ; Do not use the frame font when rendering emojis
 frame-inhibit-implied-resize nil)                ; Don't ask for confirmation when opening symlinked file
(cd "~/")                                         ; Move to the user directory
(global-display-line-numbers-mode t)              ; Enable line numbers globally
(delete-selection-mode 1)                         ; Replace region when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(global-auto-revert-mode 1)                       ; Automatically revert a buffer when it changes on disk
(fringe-mode '(8 . 0))                            ; Enable fringe on the left for git-gutter-fringe+
(electric-pair-mode t)                            ; Enable Matching delimeters
(electric-indent-mode t)                          ; Auto indentation
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(mouse-avoidance-mode 'jump)                      ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(show-paren-mode 1)                               ; Highlight matching parenthesis
#+END_SRC


* Appearance

** Tweaks
#+BEGIN_SRC emacs-lisp
(set-frame-parameter nil 'alpha-background 90)
(set-face-attribute 'default nil :font "FantasqueSansM Nerd Font Mono" :height 130)
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "FantasqueSansM Nerd Font" :height 180))))
 '(fixed-pitch ((t ( :family "FantasqueSansM Nerd Font Mono" :height 130)))))

(custom-theme-set-faces
 'user
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (fixed-pitch)))))
 '(org-document-info ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 '(org-link ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
 '(mode-line ((t (:inherit fixed-pitch))))
 '(line-number ((t (:inherit fixed-pitch)))))
#+END_SRC


** [[https://github.com/protesilaos/modus-themes][Modus Themes - GOAT]]
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :custom
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (doom-themes-treemacs-theme "doom-atom")
  :config
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config))

(require-theme 'modus-themes)

(setq modus-themes-common-palette-overrides
      '((border-mode-line-active bg-mode-line-active)
        (border-mode-line-inactive bg-mode-line-inactive)
      (fg-line-number-inactive "gray50")
        (fg-line-number-active fg-main)
        (bg-line-number-inactive unspecified)
        (bg-line-number-active unspecified)))

(load-theme 'modus-vivendi)
#+END_SRC


** [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
#+BEGIN_SRC emacs-lisp
;; (use-package doom-modeline
;;   :config
;;   (setq doom-modeline-height 30
;;         doom-modeline-buffer-file-name-style 'file-name
;;         doom-modeline-always-visible-segments '(workspace-name exwm-workspaces))
;; 
;;   :hook (after-init . doom-modeline-mode))
#+END_SRC


** [[https://github.com/jdtsmith/indent-bars][Indent Bars]]
#+BEGIN_SRC emacs-lisp
(use-package indent-bars
  :hook (prog-mode . indent-bars-mode))
#+END_SRC


** [[https://github.com/domtronn/all-the-icons.el][All the Icons]]
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+END_SRC


* Org

** [[https://orgmode.org/][Org]]
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'variable-pitch-mode)

(use-package org
  :defer t
  :config
  (setq org-adapt-indentation t
        org-hide-leading-stars nil
        org-hide-emphasis-markers t
        org-pretty-entities t
        org-src-fontify-natively t
        org-startup-folded t
        org-adapt-indentation t
        org-edit-src-content-indentation 0
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-startup-indented t
        org-indent-indentation-per-level 2
        org-edit-src-content-indentation 0
        org-auto-align-tags nil
        org-tags-column 0
        org-fold-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t
        org-agenda-files '("~/org-files/")
        org-todo-keywords
        '((sequence "TODO(t)" "ONGOING(o)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))))

(global-prettify-symbols-mode t)
#+END_SRC


** [[https://github.com/org-roam/org-roam][Org Roam]]
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory (file-truename "/home/thechibbis/org-files/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+END_SRC


** [[https://orgmode.org/manual/Org-Indent-Mode.html][Org Indent]]
#+BEGIN_SRC emacs-lisp
(require 'org-indent)

(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
#+END_SRC


** [[https://github.com/minad/org-modern][Org Modern]]
#+BEGIN_SRC emacs-lisp
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))

(use-package org-modern
  :after org
  :config
  (setq org-modern-hide-stars t
        org-modern-table t)

  (global-org-modern-mode 1)
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))

(use-package org-modern-indent
  :config
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+END_SRC


** [[https://github.com/kawabata/ox-pandoc][Org Export / ox-pandoc]]
#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc)
#+END_SRC


** Org Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-remove-tags t)
(setq org-agenda-block-separator 32)
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         (
          (tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "\n HIGHEST PRIORITY")
                 (org-agenda-prefix-format "   %i %?-2 t%s")
                 )
                )
          (agenda ""
                  (
                   (org-agenda-start-day "+0d")
                   (org-agenda-span 1)
                   (org-agenda-time)
                   (org-agenda-remove-tags t)
                   (org-agenda-todo-keyword-format "")
                   (org-agenda-scheduled-leaders '("" ""))
                   (org-agenda-current-time-string "ᐊ┈┈┈┈┈┈┈┈┈ NOW")
                   (org-agenda-overriding-header "\n TODAY'S SCHEDULE")
                   (org-agenda-prefix-format "   %i %?-2 t%s")
                   )
                  )
          (tags-todo  "-STYLE=\"habit\""
                      (
                       (org-agenda-overriding-header "\n ALL TODO")
                       (org-agenda-sorting-strategy '(priority-down))
                       (org-agenda-remove-tags t)
                       (org-agenda-prefix-format "   %i %?-2 t%s")
                       )
                      )))))

(setq org-agenda-scheduled-leaders '("" ""))
(setq org-agenda-include-diary nil)
#+END_SRC


* Packages

** [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (setq dashboard-center-content t
        dashboard-vertically-center-content t
        dashboard-projects-backend 'projectile
        dashboard-icon-type 'all-the-icons
        dashboard-items '((recents   . 5)
                          (bookmarks . 5)
                          (projects  . 5)
                          (agenda    . 5)
                          (registers . 5)))
  (dashboard-setup-startup-hook))
#+END_SRC


** [[https://github.com/oantolin/orderless][Orderless]]
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC


** [[https://github.com/minad/vertico][Vertico]]
#+BEGIN_SRC emacs-lisp
(use-package vertico)
(use-package all-the-icons-completion)

(use-package vertico-posframe
  :after vertico
  :config (vertico-posframe-mode 1))

(use-package consult)

(all-the-icons-completion-mode)
(vertico-mode)
(savehist-mode)
#+END_SRC


** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	  treemacs-width                           45
	  treemacs-no-png-images                   nil
	  treemacs-workspace-switch-cleanup        t)

    (treemacs-follow-mode t)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (treemacs-hide-gitignored-files-mode nil))

  (defun my-treemacs-disable-line-numbers ()
    "Disable line numbers in Treemacs buffers."
    (when (derived-mode-p 'treemacs-mode)
      (display-line-numbers-mode -1)))

  (add-hook 'treemacs-mode-hook 'my-treemacs-disable-line-numbers)
  :bind
  (:map global-map
	("M-0"       . treemacs-select-window)
	("C-x t 1"   . treemacs-delete-other-windows)
	("C-x t t"   . treemacs)
	("C-x t d"   . treemacs-select-directory)
	("C-x t B"   . treemacs-bookmark)
	("C-x t C-t" . treemacs-find-file)
	("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once))

(use-package treemacs-magit
  :after (treemacs magit))

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))

(use-package treemacs-all-the-icons
  :config
  (treemacs-load-theme "all-the-icons"))
#+END_SRC


** [[https://github.com/magit/magit][Magit]]
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (add-hook 'magit-status-sections-hook 'magit-insert-stashes))

;; Getting an alist-void error when running magit commands that refresh the buffer. Narrowed down to this variable so turning off for now
(setq magit-section-cache-visibility nil)
#+END_SRC


** [[https://github.com/jdtsmith/ultra-scroll][Ultra Scroll]]
#+BEGIN_SRC emacs-lisp
(use-package ultra-scroll
  :init
  (setq scroll-conservatively 3 ; or whatever value you prefer, since v0.4
        scroll-margin 0)        ; important: scroll-margin>0 not yet supported
  :config
  (ultra-scroll-mode 1))
#+END_SRC


** [[https://github.com/akermu/emacs-libvterm][vterm]]
#+BEGIN_SRC emacs-lisp
(use-package vterm)
(use-package multi-vterm
  :config
  (add-hook 'vterm-mode-hook
			(lambda ()
			  (setq-local evil-insert-state-cursor 'box)
              (evil-insert-state))))
#+END_SRC


** [[https://github.com/vedang/pdf-tools][Pdf Tools]]
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install))
#+END_SRC


** Perspective
#+BEGIN_SRC emacs-lisp
;; I actually set the bindings through exwm
(use-package perspective
  :ensure t  ; use `:straight t` if using straight.el!
  :bind (("C-x k" . persp-kill-buffer*))
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
  (persp-mode))
#+END_SRC


* Dev

** [[https://github.com/minad/corfu][Corfu]]
#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 0.5
  :delight
  :init (global-company-mode)
  :custom
  (company-begin-commands '(self-insert-command))
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  (company-tooltip-limit 15)
  (company-show-numbers t)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)
  (company-dabbrev-other-buffers nil)
  :config
  (add-to-list 'company-backends
               '(company-yasnippet
                 company-files
                 company-keywords
                 company-capf
                 company-dabbrev
                 company-dabbrev-code)))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+END_SRC


** [[https://github.com/joaotavora/yasnippet][Yasnippets]]
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config (yas-global-mode 1))

(use-package yasnippet-snippets)
#+END_SRC


** [[https://github.com/renzmann/treesit-auto][Treesit]]
#+BEGIN_SRC emacs-lisp
;; (use-package treesit-auto
;;   :custom
;;   (treesit-auto-install 'prompt)
;;   :config
;;   (treesit-auto-add-to-auto-mode-alist 'all)
;;   (global-treesit-auto-mode))
#+END_SRC


** [[https://github.com/flycheck/flycheck][Flycheck]]
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :after (direnv)
  :config
  (setq flycheck-display-errors-delay 0.25
        flycheck-buffer-switch-check-intermediate-buffers t)
  :init (global-flycheck-mode)
  :bind (:map flycheck-mode-map
	      ("M-n" . flycheck-next-error) ; optional but recommended error navigation
	      ("M-p" . flycheck-previous-error)))

(add-hook 'afterinit-hook #'global-flycheck-mode)
#+END_SRC


** lsp

*** Modes

**** [[https://github.com/brotzeit/rustic][Rust]]
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t
        lsp-rust-analyzer-cargo-watch-command "clippy"))

 (use-package rustic
   :after (rust-mode))

 (use-package cargo
   :hook (rustic . cargo-minor-mode))
#+END_SRC


**** [[https://github.com/dominikh/go-mode.el][Go]]
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure nil
  :mode (("\\.go\\'" . go-mode))
  :custom
  (go-ts-mode-indent-offset 4))
#+END_SRC

***** [[https://github.com/brantou/emacs-go-tag][Go Tag]]
#+BEGIN_SRC emacs-lisp
(use-package go-tag)
#+END_SRC
***** [[https://github.com/s-kostyaev/go-fill-struct][Go Fill Struct]]
#+BEGIN_SRC emacs-lisp
(use-package go-fill-struct)
#+END_SRC


**** Lsp Biome
#+BEGIN_SRC emacs-lisp
(use-package lsp-biome)
#+END_SRC


**** Some syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode
  :mode ("\\.proto\\'"))

(use-package nix-ts-mode
  :mode ("\\.nix\\'" . nix-ts-mode))

(use-package yaml-ts-mode
  :ensure nil
  :mode ("\\.y[a]?ml\\'"))

(use-package json-ts-mode
  :ensure nil
  :mode ("\\.json\\'"))

(use-package dockerfile-ts-mode
  :ensure nil
  :mode ("\\Dockerfile\\'"))

(use-package elixir-ts-mode
  :ensure nil
  :mode ("\\.elixir\\'"
         "\\.ex\\'"
         "\\.exs\\'"
         "mix\\.lock"))

(use-package tsx-ts-mode
  :ensure nil
  :mode ("\\.tsx\\'"
         "\\.jsx\\'"))

(use-package typescript-ts-mode
  :ensure nil
  :mode ("\\.ts\\'"
         "\\.js\\'"
         "\\.mjs\\'"
         "\\.mts\\'"
         "\\.cjs\\'"))

(use-package prisma-ts-mode
  :ensure nil
  :mode ("\\.prisma\\'"))
#+END_SRC


*** [[https://github.com/flycheck/flycheck][Lsp Mode]]
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-folding nil
        lsp-enable-text-document-color t
        lsp-enable-on-type-formatting nil
        lsp-headerline-breadcrumb-enable nil
        lsp-completion-provider :none
        lsp-idle-delay 0.5

        lsp-semantic-tokens-max-concurrent-idle-requests 100
        lsp-semantic-tokens-enable t)
  :hook ((nix-ts-mode . lsp-deferred)
         (protobuf-mode . lsp-deferred)
         (yaml-ts-mode . lsp-deferred)
         (json-ts-mode . lsp-deferred)
         (dockerfile-ts-mode . lsp-deferred)
         (go-mode . lsp-deferred)
         ((tsx-ts-mode
           typescript-ts-mode
           js-ts-mode) . lsp-deferred)
         (lsp-mode . lsp-enable-which-key-integration))
  :config
  (lsp-register-client (make-lsp-client
                        :new-connection (lsp-stdio-connection "elixir-ls")
                        :activation-fn (lsp-activate-on "elixir")
                        :server-id 'elixir-ls))
  :commands (lsp lsp-deferred))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-live-reporting t
        lsp-ui-sideline-toggle-symbols-info t
        lsp-ui-sideline-show-hover t
        lsp-ui-peek-enable t))

(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.direnv\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.devenv\\'"))
#+END_SRC


* Keymaps

** Vim > Emacs
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-auto-balance-windows nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC


** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-setup-side-window-bottom)
  (which-key-mode 1))
#+END_SRC


** General
#+BEGIN_SRC emacs-lisp
(use-package general)

(general-create-definer my-leader-def
  :prefix "SPC")

(my-leader-def
  :keymaps 'normal
  "TAB" 'mode-line-other-buffer
  "." 'xref-find-definitions
  "," 'xref-pop-marker-stack
  "vt" 'vterm
  "vT" 'multi-vterm
  "qq" 'evil-quit
  "gg" 'magit-status

  ;; Applications
  "a" '(:ignore t :which-key "applications")
  "au" 'undo-tree-visualize
  "ac" 'cfw:open-org-calendar
  
  ;; Buffers
  "b" '(:ignore t :which-key "buffers")
  "bb" 'consult-buffer
  "bd" 'kill-this-buffer
  "bp" 'previous-buffer
  "bn" 'next-buffer
  "bN" 'evil-buffer-new
  "be" 'erase-buffer
  
  ;; Bookmarks
  "B" '(:ignore t :which-key "bookmarks")
  "BB" 'bookmark-jump
  "Bs" 'bookmark-set
  
  ;; Compiling
  "c" 'compile
  
  ;; Errors
  "e" '(:ignore t :which-key "errors")
  
  ;; Files
  "f" '(:ignore t :which-key "file")
  "ff" 'find-file
  "fs" 'save-buffer
  "fS" 'evil-write-all
  "fR" 'rename-file
  "fb" 'ranger-show-bookmarks
  "fP" 'open-config-file
  
  ;; Focus
  "F" '(:ignore t :which-key "focus")
  
  ;; LSP
  "vca" 'lsp-execute-code-action
  "vff" 'lsp-format-buffer
  "vrn" 'lsp-rename
  "vrr" 'lsp-ui-peek-find-references
  "gd"  'lsp-find-definition
  "gD"  'lsp-find-implementation
  "K"   'lsp-ui-doc-glance
  "ll"  'lsp-ui-flycheck-list

  ;; Projects
  "pp" 'projectile-switch-project
  "pf" 'projectile-find-file

  ;; Tabsbsbsbsbs
  "t" '(:ignore t :which-key "tab")
  "tn" 'tab-next
  "tb" 'tab-previous
  "tT" 'tab-new

  ;; Themes
  "tt" 'consult-theme

  ;; Windows
  "w" '(:ignore t :which-key "window")
  "wm" 'delete-other-windows
  "wf" 'delete-other-windows
  "wj" 'evil-window-down
  "wk" 'evil-window-up
  "wl" 'evil-window-right
  "wh" 'evil-window-left
  "ws" 'split-and-follow-horizontally
  "wv" 'split-and-follow-vertically
  "wd" 'evil-window-delete
  "wc" 'evil-window-delete
  "wH" 'evil-window-move-far-left
  "wL" 'evil-window-move-far-right
  "wK" 'evil-window-move-very-top
  "wJ" 'evil-window-move-very-bottom
  "w=" 'balance-windows

  ;; Help
  "h" '(:ignore t :which-key "help")
  "hk" 'describe-key
  "hv" 'describe-variable
  "hf" 'describe-function
  "hK" 'general-describe-keybindings)

;;(use-package general
;;       :demand t
;;       :config
;;       (general-evil-setup t)
;;       (define-key evil-motion-state-map " " nil)
;;       (general-create-definer leader-def :prefix "SPC")
;;       (leader-def
;;         :states 'normal
;;         ;; Misc
;;         ))
#+END_SRC


* IDK WHERE TO PUT
#+begin_src emacs-lisp
(use-package visual-fill-column)
(defun cbb/org-mode-visual-fill ()
  (setq visual-fill-column-width 150
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . cbb/org-mode-visual-fill))

(use-package rainbow-mode
  :config (rainbow-mode))

(use-package direnv
  :config
  (direnv-mode))

(use-package zen-mode)

(use-package projectile
  :init
  (projectile-mode 1))

(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(use-package winum
  :defer 0.5
  :custom
  (winum-auto-setup-mode-line nil)
  :config
  (winum-mode))

(use-package emacs
  :custom
  (context-menu-mode t)
  (enable-recursive-minibuffers t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  (tab-always-indent 'complete)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (text-mode-ispell-word-completion nil))

(defun toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message 
   (if (let (window (get-buffer-window (current-buffer)))
	 (set-window-dedicated-p window 
    				 (not (window-dedicated-p window))))
       "Window '%s' is dedicated"
     "Window '%s' is normal")
   (current-buffer)))
#+end_src


* EXWM
** Apps
#+BEGIN_SRC emacs-lisp
(defun cbb/discord()
  (interactive)
  (start-process-shell-command "discord" nil "discord"))

(defun cbb/spotify()
  (interactive)
  (start-process-shell-command "spotify" nil "spotify"))

(defun cbb/zen()
  (interactive)
  (start-process-shell-command "zen" nil "zen"))

(defun cbb/easyeffects()
  (interactive)
  (start-process-shell-command "easyeffects" nil "easyeffects"))

(defun cbb/feh ()
  (interactive)
  (start-process-shell-command
   "feh" nil  "feh --bg-scale $HOME/.wallpaper.jpg"))
#+END_SRC

** Exwm
#+begin_src emacs-lisp
(defun cbb/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun cbb/exwm-init-hook ()
  (exwm-workspace-switch-create 1)

  (setq display-time-day-and-date t)
  (display-time-mode 1)

  (cbb/run-in-background "picom")
  (cbb/run-in-background "flameshot")
  (cbb/run-in-background "dunst")
  (cbb/run-in-background "pasystray")
  (cbb/run-in-background "blueman-applet"))

(defun cbb/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(use-package exwm
  :config
  (setq exwm-workspace-show-all-buffers t)
  (setq exwm-layout-show-all-buffers t)
  (setq exwm-workspace-number 9)

  (add-hook 'exwm-update-class-hook #'cbb/exwm-update-class)

  (add-hook 'exwm-init-hook #'cbb/exwm-init-hook)

  (add-hook 'exwm-input--input-mode-change-hook
            'force-mode-line-update)

  (add-hook 'exwm-mode-hook
            (lambda ()
              (evil-local-set-key 'motion (kbd "C-U") nil)))

  (require 'exwm-randr)
  (exwm-randr-mode)
  (start-process-shell-command "xrandr" nil "xrandr --output HDMI-0 --primary --mode 3840x2160 --pos 0x0 --rotate normal")

  (cbb/feh)
  ;; (cbb/discord)
  ;; (cbb/spotify)
  ;; (cbb/zen)
  ;; (cbb/easyeffects)

  (require 'exwm-systemtray)
  (setq exwm-systemtray-height 32)
  (exwm-systemtray-mode)

  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j
          ?\C-\ ))

  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  (exwm-input-set-key (kbd "s-r") #'exwm-reset)
  (exwm-input-set-key (kbd "s-w") #'exwm-workspace-swap)
  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

  (exwm-input-set-key (kbd "s-t") 'tab-new)
  (exwm-input-set-key (kbd "s-b") 'consult-buffer)


  (exwm-input-set-key (kbd "s-W") 'persp-switch)
  (exwm-input-set-key (kbd "s-a") 'persp-add-buffer)
  (exwm-input-set-key (kbd "s-A") 'persp-set-buffer)
  (exwm-input-set-key (kbd "s-k") 'persp-remove)

  (exwm-input-set-key (kbd "s-q") 'kill-buffer)
  (exwm-input-set-key (kbd "s-Q") 'persp-kill)

  ;; the next loop will bind s-<number> to switch to the corresponding workspace
  (dotimes (i 9)
    (exwm-input-set-key (kbd (format "s-%d" (1+ i)))
                        `(lambda ()
                           (interactive)
                           (exwm-workspace-switch-create ,(1+ i)))))

  ;; the simplest launcher, I keep it in only if dmenu eventually stopped working or something
  (exwm-input-set-key (kbd "s-&")
                      (lambda (command)
                        (interactive (list (read-shell-command "$ ")))
                        (start-process-shell-command command nil command)))

  (exwm-wm-mode))
#+end_src



